=begin
#Demo Client for Passmeister Apple Wallet and Google Wallet API

#[www.passmeister.com](https://www.passmeister.com).

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.39

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PassApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PassApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PassApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PassApi' do
    it 'should create an instance of PassApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PassApi)
    end
  end

  # unit tests for create_or_update_pass
  # This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
  # This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
  # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :pass_id id of the pass (provided by you when creating the pass or automatically set by passmeister)
  # @return [nil]
  describe 'create_or_update_pass test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_pass
  # Delete pass by pass id.
  # Delete pass by pass id.
  # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
  # @param pass_id id of the pass
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_pass test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pass
  # Get pass information by pass id.
  # Get pass information by pass id.
  # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
  # @param pass_id id of the pass
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_pass test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pass_list
  # Retrieve the list of active pass ids for a given pass type.
  # Retrieve the list of active pass ids for a given pass type.
  # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :page 
  # @option opts [Object] :limit 
  # @return [nil]
  describe 'pass_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pass_sync
  # Send updates to all active passes for a given pass type.
  # For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
  # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'pass_sync test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
