=begin
#Demo Client for Passmeister Apple Wallet and Google Wallet API

#[www.passmeister.com](https://www.passmeister.com).

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.39

=end

require 'uri'

module SwaggerClient
  class PassApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
    # This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :pass_id id of the pass (provided by you when creating the pass or automatically set by passmeister)
    # @return [nil]
    def create_or_update_pass(pass_type_id, opts = {})
      create_or_update_pass_with_http_info(pass_type_id, opts)
      nil
    end

    # This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
    # This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :pass_id id of the pass (provided by you when creating the pass or automatically set by passmeister)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_update_pass_with_http_info(pass_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PassApi.create_or_update_pass ...'
      end
      # verify the required parameter 'pass_type_id' is set
      if @api_client.config.client_side_validation && pass_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'pass_type_id' when calling PassApi.create_or_update_pass"
      end
      # resource path
      local_var_path = '/pass'

      # query parameters
      query_params = {}
      query_params[:'passTypeId'] = pass_type_id
      query_params[:'passId'] = opts[:'pass_id'] if !opts[:'pass_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PassApi#create_or_update_pass\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete pass by pass id.
    # Delete pass by pass id.
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param pass_id id of the pass
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pass(pass_type_id, pass_id, opts = {})
      delete_pass_with_http_info(pass_type_id, pass_id, opts)
      nil
    end

    # Delete pass by pass id.
    # Delete pass by pass id.
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param pass_id id of the pass
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_pass_with_http_info(pass_type_id, pass_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PassApi.delete_pass ...'
      end
      # verify the required parameter 'pass_type_id' is set
      if @api_client.config.client_side_validation && pass_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'pass_type_id' when calling PassApi.delete_pass"
      end
      # verify the required parameter 'pass_id' is set
      if @api_client.config.client_side_validation && pass_id.nil?
        fail ArgumentError, "Missing the required parameter 'pass_id' when calling PassApi.delete_pass"
      end
      # resource path
      local_var_path = '/pass'

      # query parameters
      query_params = {}
      query_params[:'passTypeId'] = pass_type_id
      query_params[:'passId'] = pass_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PassApi#delete_pass\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get pass information by pass id.
    # Get pass information by pass id.
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param pass_id id of the pass
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_pass(pass_type_id, pass_id, opts = {})
      get_pass_with_http_info(pass_type_id, pass_id, opts)
      nil
    end

    # Get pass information by pass id.
    # Get pass information by pass id.
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param pass_id id of the pass
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_pass_with_http_info(pass_type_id, pass_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PassApi.get_pass ...'
      end
      # verify the required parameter 'pass_type_id' is set
      if @api_client.config.client_side_validation && pass_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'pass_type_id' when calling PassApi.get_pass"
      end
      # verify the required parameter 'pass_id' is set
      if @api_client.config.client_side_validation && pass_id.nil?
        fail ArgumentError, "Missing the required parameter 'pass_id' when calling PassApi.get_pass"
      end
      # resource path
      local_var_path = '/pass'

      # query parameters
      query_params = {}
      query_params[:'passTypeId'] = pass_type_id
      query_params[:'passId'] = pass_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PassApi#get_pass\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve the list of active pass ids for a given pass type.
    # Retrieve the list of active pass ids for a given pass type.
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :page 
    # @option opts [Object] :limit 
    # @return [nil]
    def pass_list(pass_type_id, opts = {})
      pass_list_with_http_info(pass_type_id, opts)
      nil
    end

    # Retrieve the list of active pass ids for a given pass type.
    # Retrieve the list of active pass ids for a given pass type.
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :page 
    # @option opts [Object] :limit 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def pass_list_with_http_info(pass_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PassApi.pass_list ...'
      end
      # verify the required parameter 'pass_type_id' is set
      if @api_client.config.client_side_validation && pass_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'pass_type_id' when calling PassApi.pass_list"
      end
      # resource path
      local_var_path = '/pass/list'

      # query parameters
      query_params = {}
      query_params[:'passTypeId'] = pass_type_id
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PassApi#pass_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send updates to all active passes for a given pass type.
    # For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pass_sync(pass_type_id, opts = {})
      pass_sync_with_http_info(pass_type_id, opts)
      nil
    end

    # Send updates to all active passes for a given pass type.
    # For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
    # @param pass_type_id your pass type id, for example P963493 (Urban Fitness)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def pass_sync_with_http_info(pass_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PassApi.pass_sync ...'
      end
      # verify the required parameter 'pass_type_id' is set
      if @api_client.config.client_side_validation && pass_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'pass_type_id' when calling PassApi.pass_sync"
      end
      # resource path
      local_var_path = '/pass/sync'

      # query parameters
      query_params = {}
      query_params[:'passTypeId'] = pass_type_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PassApi#pass_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
